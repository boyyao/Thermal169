#ifndef COLORMAP_H
#define COLORMAP_H
#include <lvgl.h>
#include <Arduino.h>
#include "shared_val.h"

static uint16_t colormap[180];

uint16_t viridis[180] PROGMEM = {
    0x400A, 0x400A, 0x400A, 0x400A, 0x400A, 0x400A, 0x402B, 0x402B, 0x404B, 0x404B,
    0x404B, 0x406B, 0x406B, 0x406C, 0x406C, 0x408C, 0x408C, 0x408C, 0x40AC, 0x40AC,
    0x40AD, 0x40AD, 0x48CD, 0x48CD, 0x48CD, 0x48CD, 0x48ED, 0x48EE, 0x48EE, 0x490E,
    0x490E, 0x490E, 0x490E, 0x490E, 0x490E, 0x412E, 0x412E, 0x412E, 0x414F, 0x414F,
    0x414F, 0x414F, 0x416F, 0x416F, 0x416F, 0x418F, 0x418F, 0x418F, 0x418F, 0x41AF,
    0x41AF, 0x41B0, 0x41B0, 0x41B0, 0x41D0, 0x41D0, 0x41D0, 0x41D0, 0x41F0, 0x41F0,
    0x41F0, 0x41F0, 0x4210, 0x4210, 0x4210, 0x4210, 0x4210, 0x4230, 0x4230, 0x3A31,
    0x3A31, 0x3A51, 0x3A51, 0x3A51, 0x3A51, 0x3A51, 0x3A71, 0x3A71, 0x3A71, 0x3A71,
    0x3A91, 0x3A91, 0x3A91, 0x3A91, 0x3A91, 0x3AB1, 0x3AB1, 0x3AB1, 0x3AB1, 0x32B1,
    0x32D1, 0x32D1, 0x32D1, 0x32F1, 0x3311, 0x3311, 0x3331, 0x3331, 0x2B51, 0x2B51,
    0x2B71, 0x2B71, 0x2B91, 0x2B91, 0x2BB1, 0x2BB1, 0x2BD1, 0x23D1, 0x23F1, 0x23F1,
    0x23F1, 0x2411, 0x2431, 0x2431, 0x2451, 0x2451, 0x2451, 0x2471, 0x2491, 0x1C91,
    0x1CB1, 0x1CB1, 0x1CD1, 0x1CD1, 0x1CD1, 0x1CF1, 0x1D10, 0x1D10, 0x1D10, 0x2530,
    0x2530, 0x2550, 0x2550, 0x2570, 0x2D6F, 0x2D8F, 0x2D8F, 0x2DAF, 0x35AF, 0x35CE,
    0x3DCE, 0x3DEE, 0x45EE, 0x460D, 0x4E0D, 0x4E0D, 0x4E2C, 0x562C, 0x564C, 0x5E4C,
    0x666B, 0x666B, 0x6E6A, 0x766A, 0x768A, 0x7689, 0x8689, 0x8EA8, 0x8EA8, 0x96A8,
    0x96C7, 0x9EC7, 0xA6C6, 0xA6C6, 0xAEE6, 0xB6E5, 0xB6E5, 0xBEE4, 0xC6E4, 0xC703,
    0xCF03, 0xD703, 0xD703, 0xDF03, 0xE703, 0xEF23, 0xEF23, 0xF723, 0xFF23, 0xFF24};

uint16_t classic[180] PROGMEM = {
    0x0002, 0x0003, 0x0003, 0x0004, 0x0004, 0x0005, 0x0005, 0x0006, 0x0006, 0x0007,
    0x0007, 0x0008, 0x0008, 0x0009, 0x0009, 0x000a, 0x000a, 0x000b, 0x000b, 0x000c,
    0x000c, 0x000d, 0x000d, 0x000e, 0x000e, 0x000f, 0x000f, 0x0010, 0x0010, 0x0011,
    0x0011, 0x0011, 0x0811, 0x0810, 0x1010, 0x1010, 0x1810, 0x180f, 0x200f, 0x200f,
    0x280f, 0x280e, 0x300e, 0x300e, 0x380e, 0x380d, 0x400d, 0x400d, 0x480d, 0x480c,
    0x500c, 0x500c, 0x580c, 0x580b, 0x600b, 0x600b, 0x680b, 0x680a, 0x700a, 0x700a,
    0x780a, 0x7809, 0x8009, 0x8009, 0x8809, 0x8808, 0x9008, 0x9008, 0x9808, 0x9807,
    0xa007, 0xa007, 0xa807, 0xa806, 0xb006, 0xb006, 0xb806, 0xb805, 0xc005, 0xc005,
    0xc805, 0xc804, 0xd004, 0xd004, 0xd804, 0xd803, 0xe003, 0xe003, 0xe803, 0xe802,
    0xf801, 0xf801, 0xf821, 0xf821, 0xf841, 0xf841, 0xf861, 0xf861, 0xf881, 0xf880,
    0xf8a0, 0xf8a0, 0xf8c0, 0xf8c0, 0xf8e0, 0xf8e0, 0xf900, 0xf900, 0xf920, 0xf920,
    0xf940, 0xf940, 0xf960, 0xf960, 0xf980, 0xf980, 0xf9a0, 0xf9a0, 0xf9c0, 0xf9c0,
    0xf9e0, 0xfa00, 0xfa20, 0xfa60, 0xfa80, 0xfac0, 0xfae0, 0xfb20, 0xfb40, 0xfb80,
    0xfba0, 0xfbe0, 0xfc00, 0xfc20, 0xfc60, 0xfc80, 0xfcc0, 0xfce0, 0xfd20, 0xfd40,
    0xfd80, 0xfda0, 0xfde0, 0xfe00, 0xfe40, 0xfe60, 0xfe80, 0xfec0, 0xfee0, 0xff20,
    0xff40, 0xff41, 0xff62, 0xff63, 0xff64, 0xff65, 0xff66, 0xff67, 0xff88, 0xff89,
    0xff8a, 0xff8b, 0xff8c, 0xff8d, 0xffae, 0xffaf, 0xffb1, 0xffb2, 0xffb3, 0xffb4,
    0xffd5, 0xffd6, 0xffd7, 0xffd8, 0xffd9, 0xffda, 0xfffb, 0xfffc, 0xfffd, 0xfffe};

uint16_t hot[180] PROGMEM = {
    0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x1000, 0x1000, 0x1000, 0x1800,
    0x1800, 0x1800, 0x1800, 0x2000, 0x2000, 0x2000, 0x2000, 0x2800, 0x2800, 0x2800,
    0x3000, 0x3000, 0x3000, 0x3000, 0x3800, 0x3800, 0x3800, 0x4000, 0x4000, 0x4000,
    0x4000, 0x4800, 0x4800, 0x4800, 0x4800, 0x5000, 0x5000, 0x5000, 0x5000, 0x5000,
    0x5800, 0x5800, 0x5800, 0x5800, 0x6000, 0x6000, 0x6000, 0x6800, 0x6800, 0x6800,
    0x6800, 0x7000, 0x7000, 0x7000, 0x7800, 0x7800, 0x7800, 0x7800, 0x8000, 0x8000,
    0x8000, 0x8000, 0x8800, 0x8800, 0x8800, 0x9000, 0x9000, 0x9000, 0x9000, 0x9800,
    0x9800, 0x9800, 0x9800, 0x9800, 0xa000, 0xa000, 0xa000, 0xa000, 0xa800, 0xa800,
    0xa800, 0xb000, 0xb000, 0xb000, 0xb000, 0xb000, 0xb000, 0xb800, 0xb800, 0xb800,
    0xc000, 0xc000, 0xc800, 0xd000, 0xd000, 0xd800, 0xe000, 0xe800, 0xe800, 0xf000,
    0xf800, 0xf800, 0xf820, 0xf820, 0xf860, 0xf880, 0xf8c0, 0xf8e0, 0xf920, 0xf940,
    0xf960, 0xf9a0, 0xf9c0, 0xfa00, 0xfa20, 0xfa40, 0xfa60, 0xfaa0, 0xfac0, 0xfae0,
    0xfb20, 0xfb40, 0xfb80, 0xfb80, 0xfbc0, 0xfc00, 0xfc40, 0xfc40, 0xfc60, 0xfca0,
    0xfcc0, 0xfd00, 0xfd20, 0xfd60, 0xfd60, 0xfda0, 0xfdc0, 0xfde0, 0xfe20, 0xfe40,
    0xfe80, 0xfea0, 0xfee0, 0xff00, 0xff40, 0xff40, 0xff60, 0xffa0, 0xffc0, 0xffe0,
    0xffe1, 0xffe2, 0xffe3, 0xffe4, 0xffe5, 0xffe6, 0xffe7, 0xffe8, 0xffe9, 0xffea,
    0xffeb, 0xffec, 0xffee, 0xffee, 0xffef, 0xfff0, 0xfff1, 0xfff2, 0xfff3, 0xfff5,
    0xfff5, 0xfff7, 0xfff7, 0xfff8, 0xfff9, 0xfffa, 0xfffb, 0xfffc, 0xfffd, 0xfffe};

uint16_t turbo[180] PROGMEM = {
    0x3087, 0x3087, 0x30A8, 0x30A8, 0x30C9, 0x30C9, 0x30EB, 0x30EB, 0x310B, 0x392D,
    0x392D, 0x394E, 0x394E, 0x396F, 0x396F, 0x3990, 0x3990, 0x39B1, 0x39D2, 0x39D2,
    0x39F3, 0x39F3, 0x4214, 0x4214, 0x4235, 0x4235, 0x4256, 0x4277, 0x4277, 0x4297,
    0x4297, 0x42B8, 0x42B8, 0x42D9, 0x42D9, 0x42FA, 0x431A, 0x431A, 0x431B, 0x431B,
    0x435C, 0x435C, 0x435C, 0x435C, 0x439D, 0x439D, 0x439D, 0x43BD, 0x43BE, 0x43DE,
    0x43DE, 0x43FE, 0x43FF, 0x441F, 0x443F, 0x443F, 0x445F, 0x445F, 0x447F, 0x447F,
    0x447F, 0x447F, 0x449F, 0x44BF, 0x44BF, 0x3CDF, 0x3CDF, 0x3CFF, 0x3CFF, 0x3D1F,
    0x3D1F, 0x353F, 0x355F, 0x355F, 0x357E, 0x357E, 0x357E, 0x2D7E, 0x2DBE, 0x2DBE,
    0x2DBD, 0x2DDD, 0x25DD, 0x25FD, 0x25FD, 0x261C, 0x261C, 0x263C, 0x263C, 0x1E3B,
    0x1E7B, 0x1E7A, 0x1E9A, 0x16D9, 0x16F8, 0x1717, 0x1F37, 0x1F36, 0x1F56, 0x2775,
    0x2774, 0x2794, 0x2F93, 0x37B2, 0x3FB1, 0x3FD1, 0x4FD0, 0x57CE, 0x5FED, 0x67ED,
    0x6FEC, 0x77EB, 0x7FEA, 0x87E9, 0x8FE8, 0x97E8, 0x97E7, 0x9FE7, 0xA7E7, 0xAFC6,
    0xB7C6, 0xBFC6, 0xBFA6, 0xC7A6, 0xCF86, 0xCF66, 0xD746, 0xD746, 0xDF26, 0xDF06,
    0xE6E6, 0xE6C7, 0xEEA7, 0xEE87, 0xF667, 0xF647, 0xF627, 0xFE07, 0xFDC7, 0xFDA6,
    0xFD86, 0xFD66, 0xFD26, 0xFCE5, 0xFCC5, 0xFCA5, 0xFC84, 0xFC44, 0xFC04, 0xFBC3,
    0xFBA3, 0xF363, 0xF342, 0xF302, 0xF2E2, 0xF2C1, 0xEA81, 0xEA61, 0xEA41, 0xE221,
    0xE1E1, 0xD9C0, 0xD9A0, 0xD1A0, 0xD160, 0xD140, 0xC940, 0xC120, 0xC0E0, 0xB8E0,
    0xB8C0, 0xB0C0, 0xA8A0, 0xA880, 0x9880, 0x9060, 0x9040, 0x8840, 0x8020, 0x8020};

uint16_t inferno[180] PROGMEM = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0001, 0x0001, 0x0002,
    0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0023, 0x0023, 0x0023, 0x0823, 0x0823,
    0x0824, 0x0824, 0x0824, 0x0824, 0x0845, 0x0845, 0x0845, 0x1045, 0x1045, 0x1046,
    0x1046, 0x1046, 0x1046, 0x1047, 0x1047, 0x1847, 0x1848, 0x1848, 0x1868, 0x1868,
    0x1868, 0x1868, 0x2069, 0x2069, 0x2049, 0x204a, 0x204a, 0x204a, 0x204a, 0x284a,
    0x284a, 0x284b, 0x284b, 0x304b, 0x304b, 0x304b, 0x304c, 0x304c, 0x304c, 0x304c,
    0x384c, 0x384c, 0x384c, 0x384c, 0x384c, 0x404c, 0x404c, 0x404d, 0x404d, 0x404d,
    0x404d, 0x484d, 0x484d, 0x484d, 0x486d, 0x486d, 0x486d, 0x486d, 0x506d, 0x506d,
    0x506d, 0x506d, 0x506d, 0x588d, 0x588d, 0x588d, 0x588d, 0x588d, 0x588d, 0x588d,
    0x60ad, 0x60ad, 0x60ad, 0x68ad, 0x68cd, 0x70cd, 0x70cd, 0x78ed, 0x78ed, 0x78ed,
    0x80ed, 0x810d, 0x890d, 0x890d, 0x892d, 0x912d, 0x912c, 0x992c, 0x994c, 0x994c,
    0xa14c, 0xa16c, 0xa16b, 0xa96b, 0xa98b, 0xb18b, 0xb18b, 0xb9aa, 0xb9aa, 0xb9aa,
    0xc1ca, 0xc1c9, 0xc1e9, 0xc9e9, 0xca09, 0xca28, 0xd228, 0xd248, 0xd248, 0xda67,
    0xda67, 0xda86, 0xdaa6, 0xe2c6, 0xe2c6, 0xe2e5, 0xe2e5, 0xeb05, 0xeb24, 0xeb44,
    0xeb64, 0xf363, 0xf3a3, 0xf3a3, 0xf3e2, 0xf3e2, 0xf402, 0xf421, 0xfc41, 0xfc61,
    0xfc81, 0xfca0, 0xfca0, 0xfce0, 0xfce0, 0xfd01, 0xfd41, 0xfd41, 0xfd82, 0xfd82,
    0xfda3, 0xfdc4, 0xfe05, 0xfe05, 0xfe25, 0xfe46, 0xf667, 0xf687, 0xf6a8, 0xf6e9,
    0xf6ea, 0xf72b, 0xf72c, 0xf74d, 0xf76e, 0xf78f, 0xf7b0, 0xf7b1, 0xf7d2, 0xfff3};

uint16_t greys_r[180] PROGMEM = { // 白热
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0020, 0x0020, 0x0841,
    0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x0861, 0x0861, 0x0861, 0x1082, 0x1082,
    0x1082, 0x1082, 0x1082, 0x1082, 0x10a2, 0x10a2, 0x10a2, 0x18c3, 0x18c3, 0x18c3,
    0x18c3, 0x18c3, 0x18c3, 0x18e3, 0x18e3, 0x18e3, 0x2104, 0x2104, 0x2104, 0x2104,
    0x2104, 0x2104, 0x2124, 0x2124, 0x2945, 0x2945, 0x2945, 0x2945, 0x2945, 0x2965,
    0x2965, 0x2965, 0x2965, 0x3186, 0x3186, 0x3186, 0x31a6, 0x31a6, 0x31a6, 0x31a6,
    0x39c7, 0x39c7, 0x39c7, 0x39e7, 0x39e7, 0x4208, 0x4208, 0x4208, 0x4208, 0x4228,
    0x4228, 0x4228, 0x4228, 0x4228, 0x4a49, 0x4a49, 0x4a49, 0x4a49, 0x4a69, 0x4a69,
    0x4a69, 0x528a, 0x528a, 0x528a, 0x528a, 0x52aa, 0x52aa, 0x52aa, 0x52aa, 0x52aa,
    0x5acb, 0x5acb, 0x5acb, 0x5aeb, 0x630c, 0x630c, 0x632c, 0x6b4d, 0x6b4d, 0x6b6d,
    0x6b6d, 0x6b6d, 0x738e, 0x738e, 0x73ae, 0x73ae, 0x7bcf, 0x7bef, 0x8410, 0x8410,
    0x8410, 0x8430, 0x8c51, 0x8c51, 0x8c71, 0x8c71, 0x9492, 0x94b2, 0x94b2, 0x94b2,
    0x9cd3, 0x9cf3, 0xa514, 0xa514, 0xa534, 0xa534, 0xad55, 0xad75, 0xad75, 0xb596,
    0xb596, 0xb5b6, 0xbdd7, 0xbdf7, 0xbdf7, 0xc618, 0xc618, 0xc618, 0xc638, 0xc638,
    0xce59, 0xce59, 0xce79, 0xce79, 0xd69a, 0xd69a, 0xd69a, 0xd6ba, 0xd6ba, 0xdedb,
    0xdedb, 0xdefb, 0xdefb, 0xdefb, 0xe71c, 0xe71c, 0xe71c, 0xe73c, 0xe73c, 0xe73c,
    0xef5d, 0xef5d, 0xef7d, 0xef7d, 0xef7d, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf7be,
    0xf7be, 0xf7be, 0xf7be, 0xf7be, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffff, 0xffff};

uint16_t test[180] PROGMEM = { // 自定
    0x0000, 0x0000, 0x0000, 0x0820, 0x0820, 0x0840, 0x1040, 0x1060, 0x1060, 0x1881,
    0x1881, 0x18A1, 0x20A1, 0x20C1, 0x20C1, 0x28E1, 0x28E1, 0x28E1, 0x3102, 0x3102,
    0x3922, 0x3922, 0x3942, 0x4142, 0x4162, 0x4162, 0x4982, 0x4983, 0x49A3, 0x51A3,
    0x51C3, 0x51C3, 0x59C3, 0x59E3, 0x59E3, 0x6204, 0x6204, 0x6A03, 0x69E3, 0x71E3,
    0x71C3, 0x79C3, 0x79A3, 0x81A3, 0x8983, 0x8983, 0x9162, 0x9162, 0x9962, 0x9942,
    0xA142, 0xA122, 0xA922, 0xA902, 0xB102, 0xB0E1, 0xB8E1, 0xC0C1, 0xC0C1, 0xC8A1,
    0xC8A1, 0xD081, 0xD081, 0xD880, 0xD860, 0xE060, 0xE040, 0xE840, 0xE820, 0xF020,
    0xF800, 0xF800, 0xF800, 0xF820, 0xF840, 0xF860, 0xF8A0, 0xF8C0, 0xF8E0, 0xF900,
    0xF920, 0xF940, 0xF960, 0xF9A0, 0xF9C0, 0xF9E0, 0xFA00, 0xFA20, 0xFA40, 0xFA80,
    0xFAA0, 0xFAC0, 0xFAE0, 0xFB00, 0xFB20, 0xFB40, 0xFB80, 0xFBA0, 0xFBC0, 0xFBE0,
    0xFC00, 0xFC20, 0xFC60, 0xFC80, 0xFCA0, 0xFCC0, 0xFCE0, 0xFD00, 0xFD20, 0xFD40,
    0xFD40, 0xFD60, 0xFD80, 0xFD80, 0xFDA0, 0xFDC0, 0xFDC0, 0xFDE0, 0xFDE0, 0xFE00,
    0xFE20, 0xFE20, 0xFE40, 0xFE60, 0xFE60, 0xFE80, 0xFE80, 0xFEA0, 0xFEC0, 0xFEC0,
    0xFEE0, 0xFF00, 0xFF00, 0xFF20, 0xFF20, 0xFF40, 0xFF60, 0xFF60, 0xFF80, 0xFFA0,
    0xFFA0, 0xFFC0, 0xFFC0, 0xFFE0, 0xFFE0, 0xFFE1, 0xFFE2, 0xFFE3, 0xFFE4, 0xFFE5,
    0xFFE6, 0xFFE6, 0xFFE7, 0xFFE8, 0xFFE9, 0xFFEA, 0xFFEB, 0xFFEC, 0xFFED, 0xFFEE,
    0xFFEE, 0xFFEF, 0xFFF0, 0xFFF1, 0xFFF2, 0xFFF3, 0xFFF4, 0xFFF5, 0xFFF6, 0xFFF6,
    0xFFF7, 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFE, 0xFFFF};




    


static LV_ATTRIBUTE_MEM_ALIGN lv_color_t canvas2_buf[2 * 240] __attribute__((aligned(4)));
void ColorMap_init()
{
  lv_canvas_set_buffer(objects.can_2, canvas2_buf, 2, 240, LV_COLOR_FORMAT_RGB565);
}

// 垂直
void showCan_2()
{
  uint16_t *buf_raw2 = reinterpret_cast<uint16_t *>(canvas2_buf);

  // 预计算每行的颜色值（共240行）
  uint16_t row_colors[240];
  for (int y = 0; y < 240; y++)
  {
    uint16_t color_index = (y * 179) / 239; // 将行索引映射到颜色索引
    if (color_index >= 180)
      color_index = 179;
    row_colors[y] = colormap[color_index];
  }
  // 竖向填充：每行写入2个相同颜色的像素
  for (int y = 0; y < 240; y++)
  {
    buf_raw2[y * 2] = row_colors[y];     // 行首像素
    buf_raw2[y * 2 + 1] = row_colors[y]; // 行尾像素
  }
  lv_obj_invalidate(objects.can_2);
}

// 定义颜色映射表指针数组
static const uint16_t *const colormaps[] = {
    classic, // COLORMAP_CLASSIC
    turbo,   // COLORMAP_TURBO
    hot,     // COLORMAP_HOT
    viridis, // COLORMAP_VIRIDIS
    inferno, // COLORMAP_INFERNO
    greys_r, // COLORMAP_GRAYSR
    test    // test
};



// 计算映射表数量
constexpr int COLORMAP_COUNT = sizeof(colormaps) / sizeof(colormaps[0]);

// 根据索引从程序存储器中复制数据到静态数组
void load_colormap(uint8_t index)
{
  {
    LockGuard lock(cmap_loading_lock);
    // 边界检查并选择映射表
    const uint16_t *selected_map = (index >= 0 && index < COLORMAP_COUNT) ? colormaps[index] : classic; // 默认映射
    // 复制到目标缓冲区
    memcpy_P(colormap, selected_map, sizeof(colormap));
    showCan_2();
  }
}
void next_cmap()
{
  cmap_now_choose = (cmap_now_choose + 1) % COLORMAP_COUNT;
  load_colormap(cmap_now_choose);
}

void priv_cmap()
{
  cmap_now_choose = (cmap_now_choose + COLORMAP_COUNT - 1) % COLORMAP_COUNT;
  load_colormap(cmap_now_choose);
}

#endif